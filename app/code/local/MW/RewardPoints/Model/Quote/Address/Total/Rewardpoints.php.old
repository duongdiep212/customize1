<?php
class MW_RewardPoints_Model_Quote_Address_Total_Rewardpoints extends Mage_Sales_Model_Quote_Address_Total_Abstract
{
	protected $_itemTotals;
	protected $array_whole_cart = array();
	protected $array_whole_cart_x_y = array();
	protected $array_rule_active = array();
	
	public function __construct(){
        $this->setCode('reward_points');
    }
    
	public function collect(Mage_Sales_Model_Quote_Address $address)
    {
    	parent::collect($address);
    	$store_id = Mage::app()->getStore()->getId();
    	$quote = $address->getQuote();
    	
    	$total_send_point = 0;		
    	if($quote->getSpendRewardpointCart()) $total_send_point =  Mage::helper('rewardpoints')->getMaxPointToCheckOut();
    	// set Payment method credit history
    	if ($quote->getPayment()->hasMethodInstance()){            
		    $paymentMethod = $quote->getPayment()->getMethodInstance();
		    if($paymentMethod->getCode() == 'rewardpoints') {
		    	$quote->setMwRewardpointDiscount(0)->save();
		    	$quote->setMwRewardpoint(0)->save();

		    } 	
		}
		
		$totalDiscountAmount = Mage::helper('core')->currency($quote->getMwRewardpointDiscount(),false,false);
        $baseTotalDiscountAmount = $quote->getMwRewardpointDiscount();
    	$items = $address->getAllVisibleItems();
        if (!count($items)) {
            return $this;
        }
        $baseSubtotalWithDiscount = $address->getData('base_subtotal') + $address->getData('base_discount_amount');
        // spend point---------------------
        $spend_reward_point_cart = 0;
        $spend_sub_point = 0;
        $spend_sub_money = 0;
        
    	$spend_programs = $this->getSpendProgramResult();
    	// earn point------------------
    	$earn_reward_point = 0;
    	$earn_reward_point_cart = 0;
    	$programs = $this ->getEarnProgramResult();
    	
    	$discountAmountTiem = $baseTotalDiscountAmount;
    	$product_sell_point = 0;
		$reward_point_detail = array();	
		$array_rule_show = array();
     	foreach ($items as $item) {
        	$reward_point = 0;
        	$mw_reward_point = 0;
        	$product_id = $item->getProductId();
    	 	$qty = $item->getQty();
    	 	
    	 	$mw_reward_point_sell = Mage::getModel('catalog/product')->load($product_id)->getData('mw_reward_point_sell_product');
			if($mw_reward_point_sell >0)$product_sell_point = $product_sell_point + $qty * $mw_reward_point_sell;
			
    	 	$appy_reward = (int)Mage::helper('rewardpoints')->getAppyRewardPoints($store_id);
    	 	
    	 	$price_withdiscount = $item->getBasePrice()- $item->getBaseDiscountAmount()/$qty;
    	 	
    	 	if($appy_reward == MW_RewardPoints_Model_Appyreward::BEFORE) $price = $item->getBasePrice();
    	 	else $price = $price_withdiscount;

	    	$mw_reward_point = $qty * Mage::getModel('rewardpoints/catalogrules')->getPointCatalogRulue($product_id);
	
	    	if ($item->getHasChildren() && $item->isChildrenCalculated()) {
            	foreach ($item->getChildren() as $child) {
                    
            		$qty_child = $child->getQty();
            		$price_product_withdiscount = $child->getBasePrice()- $child->getBaseDiscountAmount()/$qty_child;
                    
                    if($appy_reward == MW_RewardPoints_Model_Appyreward::BEFORE) $price_product = $child->getBasePrice();
		    	 	else $price_product = $price_product_withdiscount;
     		
                    $array_spend_reward_point = $this ->SpendProcessRule($child, $spend_programs,$qty_child,$price_product_withdiscount);

		    	 	if((int)$array_spend_reward_point[1] > 0 ) $spend_sub_point = $spend_sub_point + $qty * $array_spend_reward_point[1];
		    	 	if((double)$array_spend_reward_point[2] > 0) $spend_sub_money = $spend_sub_money + $qty * $array_spend_reward_point[2];
     				
		    	 	$reward_point_array = $this->processRuleConfigurableProduct($child, $programs,$qty_child,$price_product,$qty,$baseSubtotalWithDiscount);
		    	 	$reward_point = $reward_point_array[1];
                    $rule_details = $reward_point_array[2];
	    		
		    		foreach ($rule_details as $key => $rule_detail) {
		    			if(!isset($reward_point_detail[$key])) $reward_point_detail[$key] = 0;
		    			$reward_point_detail[$key] = $reward_point_detail[$key] + $rule_detail;
		    		}
		    	 	
		    	 	$earn_reward_point = $earn_reward_point + $reward_point + $mw_reward_point;
    				$earn_reward_point_cart = $earn_reward_point_cart + $reward_point;
		    	 	/*
		    	 	$itemPrice = ($qty * $qty_child * $child->getBasePrice() - $child->getBaseDiscountAmount());
	    			if($discountAmountTiem <= $itemPrice)
			    	{
			    		$child->setDiscountAmount($child->getDiscountAmount()+ Mage::helper('core')->currency($discountAmountTiem,false,false));
						$child->setBaseDiscountAmount($child->getBaseDiscountAmount() + $discountAmountTiem);
						$discountAmountTiem = 0;
			    	}else{
			    		$child->setDiscountAmount($child->getDiscountAmount()+ Mage::helper('core')->currency($itemPrice,false,false));
						$child->setBaseDiscountAmount($child->getBaseDiscountAmount() + $itemPrice);
						$discountAmountTiem = $discountAmountTiem - $itemPrice;
			    	};*/
    				
	            	$point_spend_item = (int)$array_spend_reward_point[1];
		    		if($array_spend_reward_point[2] > 0) 
		    			$point_spend_item = Mage::helper('rewardpoints')->exchangeMoneysToPoints($array_spend_reward_point[2],$store_id);
		    		
		    		if($point_spend_item > 0 && $total_send_point >0){
		    			$item_discount = round(($point_spend_item/$total_send_point)* $baseTotalDiscountAmount,2);
		    			$this->setDiscountItem($child,$item_discount);
						$discountAmountTiem = round($discountAmountTiem - $item_discount,2);
		    		}   
            	}
	    	}else{
	    		
	    		$array_spend_reward_point = $this ->SpendProcessRule($item, $spend_programs,$qty,$price_withdiscount);
	    	 	if((int)$array_spend_reward_point[1] > 0 ) $spend_sub_point = $spend_sub_point + $array_spend_reward_point[1];
	    	 	if((double)$array_spend_reward_point[2] > 0) $spend_sub_money = $spend_sub_money + $array_spend_reward_point[2];
	    	 	
	    		$reward_point_array = $this->processRule($item, $programs,$qty,$price,$baseSubtotalWithDiscount);
	    		
	    		$reward_point = $reward_point_array[1];
	    		$rule_details = $reward_point_array[2];
	    		
	    		foreach ($rule_details as $key => $rule_detail) {
	    			if(!isset($reward_point_detail[$key])) $reward_point_detail[$key] = 0;
	    			$reward_point_detail[$key] = $reward_point_detail[$key] + $rule_detail;
	    		}
	    		$earn_reward_point = $earn_reward_point + $reward_point + $mw_reward_point;
	    		$earn_reward_point_cart = $earn_reward_point_cart + $reward_point;
	    		
	    		/*
	    		$itemPrice = ($qty * $item->getBasePrice() - $item->getBaseDiscountAmount());
		    	if($discountAmountTiem <= $itemPrice)
		    	{
		    		$item->setDiscountAmount($item->getDiscountAmount()+ Mage::helper('core')->currency($discountAmountTiem,false,false));
					$item->setBaseDiscountAmount($item->getBaseDiscountAmount() + $discountAmountTiem);
					$discountAmountTiem = 0;
		    	}else{
		    		$item->setDiscountAmount($item->getDiscountAmount()+ Mage::helper('core')->currency($itemPrice,false,false));
					$item->setBaseDiscountAmount($item->getBaseDiscountAmount() + $itemPrice);
					$discountAmountTiem = $discountAmountTiem - $itemPrice;
		    	};*/
	    		$point_spend_item = (int)$array_spend_reward_point[1];
	    		if($array_spend_reward_point[2] > 0) 
	    			$point_spend_item = Mage::helper('rewardpoints')->exchangeMoneysToPoints($array_spend_reward_point[2],$store_id);
	    		
	    		if($point_spend_item > 0 && $total_send_point >0){
	    			
	    			$item_discount = round(($point_spend_item/$total_send_point)* $baseTotalDiscountAmount,2);
	    			$this->setDiscountItem($item,$item_discount);
					$discountAmountTiem = round($discountAmountTiem - $item_discount,2);
	    		}
	    	}
        }
        
        if($discountAmountTiem != 0) $this->setRepeatDiscountItem($items,$discountAmountTiem,$total_send_point,$spend_programs,$store_id);
        
        
		$array_rule_show = array_diff($programs,$this->array_rule_active);
		//zend_debug::dump($array_rule_show);die(); 
        $spend_sub_money_to_point = 0;
        if($spend_sub_money > 0 ) $spend_sub_money_to_point = Mage::helper('rewardpoints')->exchangeMoneysToPoints($spend_sub_money,$store_id);
        $spend_reward_point_cart = Mage::helper('rewardpoints')->roundPoints($spend_sub_point + $spend_sub_money_to_point,$store_id,true);
        $quote->setSpendRewardpointCart($spend_reward_point_cart)->save();
        $quote->setEarnRewardpoint($earn_reward_point)->save();
        $quote->setEarnRewardpointCart($earn_reward_point_cart)->save();
        $quote->setMwRewardpointSellProduct($product_sell_point)->save();
        $quote->setMwRewardpointDetail(serialize($reward_point_detail))->save();
        $quote->setMwRewardpointRuleMessage(serialize($array_rule_show))->save();
        
		$address->setRewardPointsDiscount($totalDiscountAmount);
        $address->setBaseRewardPointsDiscount($baseTotalDiscountAmount);
        
        $address->setGrandTotal($address->getGrandTotal() - $address->getRewardPointsDiscount());
        $address->setBaseGrandTotal($address->getBaseGrandTotal()-($address->getBaseRewardPointsDiscount()));
        $address->setBaseDiscountAmount($address->getBaseDiscountAmount()- ($address->getBaseRewardPointsDiscount()));
        
      
    	return $this;
    	
    }

    public function fetch(Mage_Sales_Model_Quote_Address $address)
    {
       $amount = $address->getRewardPointsDiscount();
       //$amount = $address->getRewardPointsEarn();
        if ($amount!=0) {
        	$title = Mage::helper('sales')->__('Discount (Reward Points)');
            $address->addTotal(array(
                'code'=> $this->getCode(),
                'title'=>$title,
                'value'=>-$amount,
            	'strong'    => false
            	//'area'    => '1'
            ));
        }
        return $this;
    }
    public function setDiscountItem($item,$item_discount)
    {
    	$item->setDiscountAmount($item->getDiscountAmount()+ Mage::helper('core')->currency($item_discount,false,false));
		$item->setBaseDiscountAmount($item->getBaseDiscountAmount() + $item_discount);
    }
    public function setRepeatDiscountItem($items,$discountAmountTiem,$total_send_point,$spend_programs,$store_id)
    {
    	$check = false;
        foreach ($items as $item) {
        	if ($item->getHasChildren() && $item->isChildrenCalculated()) {
        		foreach ($item->getChildren() as $child) {
            		$qty_child = $child->getQty();
            		$price_product_withdiscount = $child->getBasePrice()- $child->getBaseDiscountAmount()/$qty_child;
            		$array_spend_reward_point = $this ->SpendProcessRule($child, $spend_programs,$qty_child,$price_product_withdiscount);
	        		$point_spend_item = (int)$array_spend_reward_point[1];
		    		if($array_spend_reward_point[2] > 0) 
		    			$point_spend_item = Mage::helper('rewardpoints')->exchangeMoneysToPoints($array_spend_reward_point[2],$store_id);
		        	if($point_spend_item > 0 && $total_send_point >0){
		    			$child->setDiscountAmount($child->getDiscountAmount()+ Mage::helper('core')->currency($discountAmountTiem,false,false));
						$child->setBaseDiscountAmount($child->getBaseDiscountAmount() + $discountAmountTiem);
						$check = true;
						break;
		    		}
        		}
        		if($check) break;
        		
        	}else{
	        	$qty = $item->getQty();
	        	$price_withdiscount = $item->getBasePrice()- $item->getBaseDiscountAmount()/$qty;
	        	$array_spend_reward_point = $this ->SpendProcessRule($item, $spend_programs,$qty,$price_withdiscount);
	        	$point_spend_item = (int)$array_spend_reward_point[1];
	    		if($array_spend_reward_point[2] > 0) 
	    			$point_spend_item = Mage::helper('rewardpoints')->exchangeMoneysToPoints($array_spend_reward_point[2],$store_id);
	    			
	        	if($point_spend_item > 0 && $total_send_point >0){
	    			$item->setDiscountAmount($item->getDiscountAmount()+ Mage::helper('core')->currency($discountAmountTiem,false,false));
					$item->setBaseDiscountAmount($item->getBaseDiscountAmount() + $discountAmountTiem);
					break;
	    		}
        	}
        	
        }
    }
    public function getSpendProgramResult()
    {
    	$spend_programs = array();
    	$model_spend = Mage::getModel('rewardpoints/spendcartrules');
    	$spend_programs = $this ->getAllProgram($model_spend);
    	$spend_programs = $this ->getProgramByCustomerGroup($spend_programs,$model_spend);
    	if (!Mage::app()->isSingleStoreMode()) $spend_programs = $this ->getProgramByStoreView($spend_programs,$model_spend);
    	$spend_programs = $this->getProgramByEnable($spend_programs,$model_spend);
    	$spend_programs = $this->getProgramByTime($spend_programs,$model_spend);
    	$spend_programs = $this->getProgramByPostion($spend_programs,$model_spend);
    	return $spend_programs;
    }
	public function getEarnProgramResult()
    {
    	$programs = array();
    	$model_earn = Mage::getModel('rewardpoints/cartrules');
    	$programs = $this ->getAllProgram($model_earn);
    	$programs = $this ->getProgramByCustomerGroup($programs,$model_earn);
    	if (!Mage::app()->isSingleStoreMode()) $programs = $this ->getProgramByStoreView($programs,$model_earn);
    	$programs = $this->getProgramByEnable($programs,$model_earn);
    	$programs = $this->getProgramByTime($programs,$model_earn);
    	$programs = $this->getProgramByPostion($programs,$model_earn);
    	return $programs;
    }
 	public function getAllProgram($model)
    {
    	$programs = array();
    	$program_collections = $model ->getCollection();
    	foreach ($program_collections as $program_collection) {
    		$programs[] = $program_collection ->getRuleId();
    	}
    	return $programs;
    }
	public function getProgramByCustomerGroup($programs,$model)
    {   
    	$program_ids = array();
    	$group_id = Mage::getSingleton("customer/session")->getCustomerGroupId();
    	foreach ($programs as $program) {
    		
    		$customer_group_id = $model ->load($program) ->getCustomerGroupIds();
 			$customer_group_ids = explode(',',$customer_group_id);
 			if(in_array($group_id, $customer_group_ids)) $program_ids[] = $program; 
    		
    	}
    	return $program_ids;
    }
	public function getProgramByStoreView($programs,$model)
    {   
    	$program_ids = array();
    	$store_id = Mage::app()->getStore()->getId();
    	foreach ($programs as $program) {
    		
    		$store_view = $model ->load($program) ->getStoreView();
 			$store_views = explode(',',$store_view);
 			if(in_array($store_id, $store_views) OR $store_views[0]== '0') $program_ids[] = $program; 
    		
    	}
    	return $program_ids;
    }
	public function getProgramByEnable($programs,$model)
    {   
    	$program_ids = array();
    	foreach ($programs as $program) {
    		$status = $model ->load($program)->getStatus();
    		if($status == MW_RewardPoints_Model_Statusrule::ENABLED) $program_ids[] = $program;
    		
    	}
    	return $program_ids;
    }
	public function getProgramByTime($programs,$model)
    {   
    	$program_ids = array();
    	foreach ($programs as $program) {
    		$cartrules = $model ->load($program);
    		$start_date = $cartrules ->getStartDate();
    		$end_date = $cartrules ->getEndDate();
    		if(Mage::app()->getLocale()->isStoreDateInInterval(null, $start_date, $end_date)) $program_ids[] = $program;
    		
    	}
    	return $program_ids;
    }
	public function getProgramByPostion($programs,$model)
	{
		$program_ids = array();
		$array_program_position = array();
    	foreach ($programs as $program) {
    		$rule_position = (int)$model ->load($program)->getRulePosition();
    		$array_program_position[] = $rule_position;
			$program_ids[] = $program;
    		
    	}
    	if(sizeof($program_ids) >0) array_multisort($array_program_position, $program_ids);
    	return $program_ids;
	}
	public function processRule(Mage_Sales_Model_Quote_Item_Abstract $item, $programs,$qty,$price,$baseSubtotalWithDiscount)
    {
    	$result = array();
    	$result_reward_point = 0;
    	$_result_detail = array();
    	$_program_rule = array();
    	foreach ($programs as $program) {
    		$_program_rule[] = $program;
    	 	$rule = Mage::getModel('rewardpoints/cartrules')->load($program);
    	 	$reward_point = (int)$rule ->getRewardPoint(); 
			$simple_action = (int)$rule->getSimpleAction();
			$reward_step = (int)$rule->getRewardStep();
			$stop_rule = (int)$rule ->getStopRulesProcessing(); 
    	 	$rule ->afterLoad();
    	 	$address    = $this->getAddress_new($item);
    		if (($rule->validate($address)) && ($rule->getActions()->validate($item))) {
    			//$program_ids[] = $program;
    			if($simple_action == MW_RewardPoints_Model_Typerule::FIXED){
    				$result_reward_point = $result_reward_point + $reward_point;
    				if(!isset($_result_detail[$program])) $_result_detail[$program] = 0;
    				$_result_detail[$program] = $_result_detail[$program] + $reward_point;
    			} else if($simple_action == MW_RewardPoints_Model_Typerule::FIXED_WHOLE_CART){
    				
    				if(!(isset($this->array_whole_cart[$program]) && $this->array_whole_cart[$program] == 1)){
    					$this->array_whole_cart[$program] = 1;
    					$result_reward_point = $result_reward_point + $reward_point;
    					if(!isset($_result_detail[$program])) $_result_detail[$program] = 0;
    					$_result_detail[$program] = $_result_detail[$program] + $reward_point;
    				}
    			}else if($simple_action == MW_RewardPoints_Model_Typerule::BUY_X_GET_Y_WHOLE_CART){
    				if($reward_step > 0){
	    				if(!(isset($this->array_whole_cart_x_y[$program]) && $this->array_whole_cart_x_y[$program] == 1)){
	    					$this->array_whole_cart_x_y[$program] = 1;
	    					$result_reward_point = $result_reward_point + (int)($baseSubtotalWithDiscount/$reward_step) * $reward_point;
	    					if(!isset($_result_detail[$program])) $_result_detail[$program] = 0;
	    					$_result_detail[$program] = $_result_detail[$program] + (int)($baseSubtotalWithDiscount/$reward_step) * $reward_point;
	    				}
    				}
    				
    			}else{
					if($reward_step > 0){
						$result_reward_point = $result_reward_point + (int)(($qty * $price)/$reward_step) * $reward_point;
						if(!isset($_result_detail[$program])) $_result_detail[$program] = 0;
    					$_result_detail[$program] = $_result_detail[$program] + (int)(($qty * $price)/$reward_step)  * $reward_point;
					} 
				}
				
				if(!in_array($program, $this->array_rule_active)) $this->array_rule_active[] = $program;
				if($stop_rule){
					foreach (array_diff($programs, $_program_rule) as $_program_rule_value) {
						if(!in_array($_program_rule_value, $this->array_rule_active)) $this->array_rule_active[] = $_program_rule_value;
					}
					break;
				}
    		}
			
    	}
    	$result[1] = $result_reward_point;
    	$result[2] = $_result_detail;
    	
    	//return  $result_reward_point;
    	return  $result;
    }
	public function processRuleConfigurableProduct(Mage_Sales_Model_Quote_Item_Abstract $item, $programs,$qty,$price,$qty_parent,$baseSubtotalWithDiscount)
    {
    	$result = array();
    	$result_reward_point = 0;
    	$_result_detail = array();
    	$_program_rule = array();
    	foreach ($programs as $program) {
    		$_program_rule[] = $program;
    	 	$rule = Mage::getModel('rewardpoints/cartrules')->load($program);
    	 	$reward_point = (int)$rule ->getRewardPoint(); 
			$simple_action = (int)$rule->getSimpleAction();
			$reward_step = (int)$rule->getRewardStep();
			$stop_rule = (int)$rule ->getStopRulesProcessing(); 
    	 	$rule ->afterLoad();
    	 	$address    = $this->getAddress_new($item);
    		if (($rule->validate($address)) && ($rule->getActions()->validate($item))) {
    			//$program_ids[] = $program;
    			if($simple_action == MW_RewardPoints_Model_Typerule::FIXED){
    				$result_reward_point = $result_reward_point + $reward_point;
    				if(!isset($_result_detail[$program])) $_result_detail[$program] = 0;
    				$_result_detail[$program] = $_result_detail[$program] + $reward_point;
    			} else if($simple_action == MW_RewardPoints_Model_Typerule::FIXED_WHOLE_CART){
    				
    				if(!(isset($this->array_whole_cart[$program]) && $this->array_whole_cart[$program] == 1)){
    					$this->array_whole_cart[$program] = 1;
    					$result_reward_point = $result_reward_point + $reward_point;
    					if(!isset($_result_detail[$program])) $_result_detail[$program] = 0;
    					$_result_detail[$program] = $_result_detail[$program] + $reward_point;
    				}
    			}else if($simple_action == MW_RewardPoints_Model_Typerule::BUY_X_GET_Y_WHOLE_CART){
    				if($reward_step > 0){
	    				if(!(isset($this->array_whole_cart_x_y[$program]) && $this->array_whole_cart_x_y[$program] == 1)){
	    					$this->array_whole_cart_x_y[$program] = 1;
	    					$result_reward_point = $result_reward_point + (int)($baseSubtotalWithDiscount/$reward_step) * $reward_point;
	    					if(!isset($_result_detail[$program])) $_result_detail[$program] = 0;
	    					$_result_detail[$program] = $_result_detail[$program] + (int)($baseSubtotalWithDiscount/$reward_step) * $reward_point;
	    				}
    				}
    				
    			}else{
					if($reward_step > 0){
						$result_reward_point = $result_reward_point + (int)(($qty * $price * $qty_parent)/$reward_step) * $reward_point;
						if(!isset($_result_detail[$program])) $_result_detail[$program] = 0;
    					$_result_detail[$program] = $_result_detail[$program] + (int)(($qty * $price * $qty_parent)/$reward_step) * $reward_point;
					} 
				}
				
				if(!in_array($program, $this->array_rule_active)) $this->array_rule_active[] = $program;
				if($stop_rule){
					foreach (array_diff($programs, $_program_rule) as $_program_rule_value) {
						if(!in_array($_program_rule_value, $this->array_rule_active)) $this->array_rule_active[] = $_program_rule_value;
					}
					break;
				}
    		}
			
    	}
    	$result[1] = $result_reward_point;
    	$result[2] = $_result_detail;
    	
    	//return  $result_reward_point;
    	return  $result;
    }
	public function SpendProcessRule(Mage_Sales_Model_Quote_Item_Abstract $item, $programs,$qty,$price)
    {
    	$array_result = array();
    	$array_result[1] = 0;
    	$array_result[2] = $qty * $price;
    	foreach ($programs as $program) {
    	 	$rule = Mage::getModel('rewardpoints/spendcartrules')->load($program);
    	 	$reward_point = (int)$rule ->getRewardPoint(); 
			$stop_rule = (int)$rule ->getStopRulesProcessing(); 
			$simple_action = (int)$rule->getSimpleAction();
			$reward_step = (int)$rule->getRewardStep();
    	 	$rule ->afterLoad();
    	 	$address    = $this->getAddress_new($item);
    		if (($rule->validate($address)) && ($rule->getActions()->validate($item))) {
	    		if($simple_action == MW_RewardPoints_Model_Typerulespend::FIXED){
	    			
	    			$array_result[1] = $array_result[1] + $reward_point;
	    			$array_result[2] = 0;
	    			
	    		} else if($simple_action == MW_RewardPoints_Model_Typerulespend::BUY_X_USE_Y) {
					
					if($reward_step > 0) $array_result[1] = $array_result[1] + (int)(($qty * $price)/$reward_step) * $reward_point;
					$array_result[2] = 0; 
					
				}else if($simple_action == MW_RewardPoints_Model_Typerulespend::USE_UNLIMIT_POINTS){
					$array_result[1] = 0;
    				$array_result[2] = $qty * $price;
					
				}else if($simple_action == MW_RewardPoints_Model_Typerulespend::NOT_ALLOW_USE_POINTS){
					$array_result[1] = 0;
    				$array_result[2] = 0;
				};
	    	}
			if($stop_rule) break;
    	}
    	return $array_result;
    }
 	
	protected function getAddress_new(Mage_Sales_Model_Quote_Item_Abstract $item)
    {
        if ($item instanceof Mage_Sales_Model_Quote_Address_Item) {
            $address = $item->getAddress();
        } elseif ($item->getQuote()->isVirtual()) {
            $address = $item->getQuote()->getBillingAddress();
        } else {
            $address = $item->getQuote()->getShippingAddress();
        }
        return $address;
    }
	/*protected function _roundPoints($points,$up = true)
    {
		$config = Mage::getStoreConfig('rewardpoints/config/point_money_rate');
		$rate = explode("/",$config);
		$tmp = (int)($points/$rate[0]) * $rate[0];
		if($up)
			return $tmp<$points?$tmp+$rate[0]:$tmp;
		return $tmp;
    }
    */

}
